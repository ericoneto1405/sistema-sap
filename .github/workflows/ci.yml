name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Configurações globais
env:
  PYTHON_VERSION: "3.9"

jobs:
  # ===========================
  # LINTING E FORMATAÇÃO
  # ===========================
  lint:
    name: Lint e Formatação
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Black - Verificar formatação
        run: black --check --diff meu_app tests
      
      - name: isort - Verificar imports
        run: isort --check-only --diff meu_app tests
      
      - name: Ruff - Linter
        run: ruff check meu_app tests
      
      - name: MyPy - Type checking
        run: mypy meu_app --ignore-missing-imports
        continue-on-error: true  # Não quebrar CI por type hints
      
      - name: Codespell - Spell checking
        run: codespell meu_app tests docs --skip="*.min.js,*.min.css,venv,node_modules"
        continue-on-error: true
  
  # ===========================
  # ANÁLISE DE SEGURANÇA
  # ===========================
  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Bandit - Análise de segurança
        run: |
          bandit -r meu_app -f json -o bandit-report.json || true
          bandit -r meu_app -f txt
      
      - name: pip-audit - Vulnerabilidades em dependências
        run: |
          pip-audit --desc --format json > pip-audit.json || true
          pip-audit --desc
        continue-on-error: true
      
      - name: Upload relatórios de segurança
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit.json
  
  # ===========================
  # TESTES
  # ===========================
  test:
    name: Testes (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Criar diretórios necessários
        run: |
          mkdir -p instance/logs
          mkdir -p instance/backups
      
      - name: Executar testes com coverage
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest --cov=meu_app --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage para Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
      
      - name: Upload relatório de coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
  
  # ===========================
  # BUILD E VALIDAÇÃO
  # ===========================
  build:
    name: Build e Validação
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verificar importações
        run: |
          python -c "from meu_app import create_app; app = create_app()"
      
      - name: Gerar relatório de qualidade
        run: |
          mkdir -p RELATORIOS
          echo "# Relatório de Qualidade CI/CD" > RELATORIOS/CI_REPORT.md
          echo "" >> RELATORIOS/CI_REPORT.md
          echo "**Data**: $(date)" >> RELATORIOS/CI_REPORT.md
          echo "**Branch**: ${{ github.ref_name }}" >> RELATORIOS/CI_REPORT.md
          echo "**Commit**: ${{ github.sha }}" >> RELATORIOS/CI_REPORT.md
          echo "" >> RELATORIOS/CI_REPORT.md
          echo "## Status" >> RELATORIOS/CI_REPORT.md
          echo "- ✅ Lint: Passou" >> RELATORIOS/CI_REPORT.md
          echo "- ✅ Segurança: Passou" >> RELATORIOS/CI_REPORT.md
          echo "- ✅ Testes: Passou" >> RELATORIOS/CI_REPORT.md
          echo "- ✅ Build: Passou" >> RELATORIOS/CI_REPORT.md
      
      - name: Upload relatórios
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports
          path: RELATORIOS/
  
  # ===========================
  # HEALTHCHECK
  # ===========================
  healthcheck:
    name: Validar Healthchecks
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Iniciar aplicação em background
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
        run: |
          python run.py &
          sleep 5
      
      - name: Testar /healthz
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5004/healthz)
          if [ $response -eq 200 ]; then
            echo "✅ /healthz respondeu com 200"
          else
            echo "❌ /healthz falhou com código $response"
            exit 1
          fi
      
      - name: Testar /readiness
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5004/readiness)
          if [ $response -eq 200 ]; then
            echo "✅ /readiness respondeu com 200"
          else
            echo "❌ /readiness falhou com código $response"
            exit 1
          fi
